Importing fonts from google
------------------------------
    @import url('https://fonts.googleapis.com/css2?family=Anton&display=swap');

Units
------------------------------
    px, %

Combinators
------------------------------
    1. Adjacent Sibling
        h2 + p {color: red;}

    2. General Sibling
        h2 ~ p{color: red;}

    3. Child
       div > p{color: red;}

    4. Descendant
        div p{color: red;}

box-sizing
------------------------------
content-box [default]: 
    - Width/height apply only to the content.
    - Padding and border are added outside the content box, increasing the total size of the element.
    - Margin is always outside the box and unaffected by box-sizing.

border-box: width and height includes the padding and margin
    - Width/height include content, padding, and border.
    - Padding and border are absorbed into the declared width/height.
    - Margin still sits outside and is unaffected
    - set it through universal select which is *{} since inheritance will not work if provided with body for the block level elements like section

background
------------------------------
    background: [background-color] [background-image] [background-repeat] [background-attachment] [background-position] / [background-size] [background-origin] [background-clip];
    background: #000 url("../images/freedom.jpg") no-repeat fixed left 10% bottom 20% / cover border-box border-box;
    background: url("../images/freedom.jpg") no-repeat fixed left 10% bottom 20% / cover border-box border-box;

    | Property              | Value                         | -- | 
    | background-image      | url("../images/freedom.jpg")  | Loads image | 
    | background-repeat     | no-repeat                     | repeat, no-repeat, repeat-x, repeat-y | 
    | background-attachment | fixed                         | fixed, scroll, local | 
    | background-position   | left 10% bottom 20%           | left top right bottom; 0% 100%; left top, left bottom; left 10% bottom 20%; center; | 
    | background-size       | cover                         | cover; contain; 100%; 100px | 
    | background-origin     | border-box                    | border-box; content-box; padding-box | 
    | background-clip       | border-box                    | padding-box; content-box; border-box; | 

    with background-image, can also apply liner-gradient and radial-gradient as well

display
------------------------------
    Basic Display Types
        - block : Element takes up full width, starts on a new line (e.g., <div>, <p>)
        - inline : Element flows within text, no width/height control (e.g., <span>)
        - inline-block : Like inline, but allows width and height
        - none : Element is removed from layout (invisible and non-interactive)
        - contents : Makes the container disappear, leaving only its children

    Layout Containers
        - flex : Creates a flex container for flexible layouts
        - inline-flex : Same as flex, but behaves like an inline element 
        - grid : Creates a grid container for two-dimensional layouts
        - inline-grid : Same as grid, but inline 
        - flow-root : Establishes a new block formatting context

    Table-Like Layouts
        - table : Behaves like a <table> 
        - table-row, table-cell etc: Mimics specific table parts like rows and cells 

    Other Values
        - list-item : Behaves like a <li> with bullet styling 
        - run-in : Rarely used; behaves as block or inline based on context 
        - initial : Resets to default (inline) 
        - inherit : Inherits from parent element
        - unset : Removes any set value, reverting to inherited or initial 

    Block level elements 
        <div> , <section> , <article> , <nav>  but also <h1> , <h2>  etc and <p>

    Inline elements
        <a> , <span> , <img> etc
        margin-top  and margin-bottom  have no effect on the element
        width  or height  on an inline element also has no effect

    Inline-Block
        Behaves like and inline element
        Respects width, height, margin and padding like a block element
        Great for button, forms inputs or layouts

Pseudo Classes and elements
------------------------------
    classes: :class name --- specific state of the element [hover, focus, active, first-Child, nth-child, checked, not(selector)]
    element: :: element name --- specific part of an element [before, after, first-letter, first-line, placeholder, selection]

    we can combine pseudo classes and elements as well 

    a:hover::after {
        content: " ðŸ”—";
    }

box-shadow
------------------------------
    box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5);

    box-shadow: offset-x offset-y blur-radius spread-radius color;
        - 2px â†’ Horizontal offset (moves the shadow 2px to the right)
        - 2px â†’ Vertical offset (moves the shadow 2px down)
        - 2px â†’ Blur radius (softens the edges of the shadow)
        - 2px â†’ Spread radius (expands the size of the shadow outward)
        -rgba(0, 0, 0, 0.5) â†’ Color (semi-transparent black)

Position
------------------------------
    static: default value, this is automatically applied
    fixed: take the element out of document flow and behaves like inline-block, viewport is the parent
    z-index: default ia auto or 0
    absolute: if parent has no position applied then parent is html
    relative: element is not taken out of document flow
    sticky:
    positioning context: top, right, bpttom, left
    stacking context:  

Filter
------------------------------
    filter: blur(4px); Blur the element
    filter: brightness(1.5); /* 1 = normal, >1 = brighter */ Increase brightness
    filter: brightness(0.5); Reduce brightness
    filter: contrast(200%); /* 100% = normal */ Increase contrast
    filter: grayscale(100%); Grayscale effect
    filter: sepia(80%); Sepia tone
    filter: hue-rotate(90deg); Hue rotation
    filter: invert(100%); Invert colors
    filter: saturate(200%); Saturate colors
    filter: drop-shadow(4px 4px 6px #ff5454); Drop shadow (like box-shadow but for images/text)
    filter: grayscale(50%) brightness(1.2) blur(2px); Combine multiple filters
    filter: inherit or initial or unset 
    filter: url("filter.svg#filter-id")
    filter: contrast(175%) brightness(3%) multiple filters

Sizes & Units
------------------------------
    Absolute Units
        These are fixed and do not scale with screen size.
        px, pt, cm, mm, in, pc  

    Relative Units
        These scale based on context like font size or viewport.
        pixel: px
        percentages: %
        em: em (calculated based on actual size of element that is inherited from parent and then multiplied by 1.5, compounding with respect to parent)
        root em: rem (html) (root element, no compunding)
        viewport width: vw 
        viewport height: vh 
        vmin (vw or vh) 
        vmax (vw or vh)
        ex (height of lower case x) 
        ch (width of 0 char) 

        Calculated Values
        You can combine units using calc():
        width: calc(100% - 20px);
        font-size: calc(1rem + 0.5vw);

